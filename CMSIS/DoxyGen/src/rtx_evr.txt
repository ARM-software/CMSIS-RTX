/** 
\defgroup rtx_evr Event functions
\ingroup rtx5_specific 
\brief RTX5 Event Recorder functions
\details
RTX5 interfaces to the <a href="http://www.keil.com/pack/doc/compiler/EventRecorder/html/index.html" target="_blank"><b>Event Recorder</b></a> 
to provide event information which helps you to understand and analyze the operation.

To use the Event Recorder together with RTX5, it is required to create an image that generates event information. The steps are:
  - <a href="http://www.keil.com/pack/doc/compiler/EventRecorder/html/UseDebugViews.html#Add_Event_Recorder" target="_blank"><b>Add Event Recorder</b></a>: Select in the RTE management dialog the software component <b>Compiler:Event Recorder</b>.
  - <a href="http://www.keil.com/pack/doc/compiler/EventRecorder/html/UseDebugViews.html#Debug_Variants" target="_blank"><b>Select Debug Variant</b></a>: Select in the RTE management dialog the \b Source variant for the software component <b>CMSIS:RTOS2 (API):Keil RTX5</b>.
  - <a href="http://www.keil.com/pack/doc/compiler/EventRecorder/html/group__EventRecorder__Setup.htm" target="_blank"><b>Add Initialization Code</b></a>: Call the function <b>EventRecorderInitialize</b> in your application code.
  - Build the application code and download it to the debug hardware.
  
Once the target application generates event information, it can be viewed in the ÂµVision debugger using the \b Event
 \b Recorder.

@{
*/

/**
\defgroup rtx_evr_memory Memory Functions
\brief Events generated memory functions 
\details
@{
*/

/**
\fn void EvrRtxMemoryInit (void *mem, uint32_t size, uint32_t result)
\details

*/

/**
\fn void EvrRtxMemoryAlloc (void *mem, uint32_t size, uint32_t type, void *block)
\details

*/

/**
\fn void EvrRtxMemoryFree (void *mem, void *block, uint32_t result)
\details

*/

/**
\fn void EvrRtxMemoryBlockInit (osRtxMpInfo_t *mp_info, uint32_t block_count, uint32_t block_size, void *block_mem)
\details

*/

/**
\fn void EvrRtxMemoryBlockAlloc (osRtxMpInfo_t *mp_info, void *block)
\details

*/

/**
\fn void EvrRtxMemoryBlockFree (osRtxMpInfo_t *mp_info, void *block, int32_t status)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_kernel Kernel Functions
\brief Events generated by kernel functions 
\details
@{
*/

/**
\fn void EvrRtxKernelError (int32_t status)
\details

*/

/**
\fn void EvrRtxKernelInitialize (void)
\details

*/

/**
\fn void EvrRtxKernelInitializeCompleted (void)
\details

*/

/**
\fn void EvrRtxKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size)
\details

*/

/**
\fn void EvrRtxKernelInfoRetrieved (osVersion_t *version, char *id_buf)
\details

*/

/**
\fn void EvrRtxKernelGetState (osKernelState_t state)
\details

*/

/**
\fn void EvrRtxKernelStart (void)
\details

*/

/**
\fn void EvrRtxKernelStarted (void)
\details

*/

/**
\fn void EvrRtxKernelLock (void)
\details

*/

/**
\fn void EvrRtxKernelLocked (int32_t lock)
\details

*/

/**
\fn void EvrRtxKernelUnlock (void)
\details

*/

/**
\fn void EvrRtxKernelUnlocked (int32_t lock)
\details

*/

/**
\fn void EvrRtxKernelRestoreLock (int32_t lock)
\details

*/

/**
\fn void EvrRtxKernelLockRestored (int32_t lock)
\details

*/

/**
\fn void EvrRtxKernelSuspend (void)
\details

*/

/**
\fn void EvrRtxKernelSuspended (uint32_t sleep_ticks)
\details

*/

/**
\fn void EvrRtxKernelResume (uint32_t sleep_ticks)
\details

*/

/**
\fn void EvrRtxKernelResumed (void)
\details

*/

/**
\fn void EvrRtxKernelGetTickCount (uint64_t count)
\details

*/

/**
\fn void EvrRtxKernelGetTickFreq (uint32_t freq)
\details

*/

/**
\fn void EvrRtxKernelGetSysTimerCount (uint32_t count)
\details

*/

/**
\fn void EvrRtxKernelGetSysTimerFreq (uint32_t freq)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_thread Thread Functions
\brief Events generated by thread functions 
\details
@{
*/

/**
\fn void EvrRtxThreadError (osThreadId_t thread_id, int32_t status)
\details

*/

/**
\fn void EvrRtxThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr)
\details

*/

/**
\fn void EvrRtxThreadCreated (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadGetName (osThreadId_t thread_id, const char *name)
\details

*/

/**
\fn void EvrRtxThreadGetId (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadGetState (osThreadId_t thread_id, osThreadState_t state)
\details

*/

/**
\fn void EvrRtxThreadGetStackSize (osThreadId_t thread_id, uint32_t stack_size)
\details

*/

/**
\fn void EvrRtxThreadGetStackSpace (osThreadId_t thread_id, uint32_t stack_space)
\details

*/

/**
\fn void EvrRtxThreadSetPriority (osThreadId_t thread_id, osPriority_t priority)
\details

*/

/**
\fn void EvrRtxThreadGetPriority (osThreadId_t thread_id, osPriority_t priority)
\details

*/

/**
\fn void EvrRtxThreadYield (void)
\details

*/

/**
\fn void EvrRtxThreadSuspend (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadSuspended (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadResume (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadResumed (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadDetach (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadDetached (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadJoin (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadJoinPending (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadJoined (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadBlocked (osThreadId_t thread_id, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxThreadUnblocked (osThreadId_t thread_id, uint32_t ret_val)
\details

*/

/**
\fn void EvrRtxThreadSwitch (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadExit (void)
\details

*/

/**
\fn void EvrRtxThreadTerminate (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadDestroyed (osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxThreadGetCount (uint32_t count)
\details

*/

/**
\fn void EvrRtxThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items, uint32_t count)
\details

*/

/**
\fn void EvrRtxThreadFlagsSet (osThreadId_t thread_id, int32_t flags)
\details

*/

/**
\fn void EvrRtxThreadFlagsSetDone (osThreadId_t thread_id, int32_t thread_flags)
\details

*/

/**
\fn void EvrRtxThreadFlagsClear (int32_t flags)
\details

*/

/**
\fn void EvrRtxThreadFlagsClearDone (int32_t thread_flags)
\details

*/

/**
\fn void EvrRtxThreadFlagsGet (int32_t thread_flags)
\details

*/

/**
\fn void EvrRtxThreadFlagsWait (int32_t flags, uint32_t options, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxThreadFlagsWaitPending (int32_t flags, uint32_t options, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxThreadFlagsWaitTimeout (void)
\details

*/

/**
\fn void EvrRtxThreadFlagsWaitCompleted (int32_t flags, uint32_t options, int32_t thread_flags)
\details

*/

/**
\fn void EvrRtxThreadFlagsWaitNotCompleted (int32_t flags, uint32_t options)
\details

*/

/**
\fn void EvrRtxThreadDelay (uint32_t ticks)
\details

*/

/**
\fn void EvrRtxThreadDelayUntil (uint64_t ticks)
\details

*/

/**
\fn void EvrRtxThreadDelayCompleted (void)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_timer Timer Functions
\brief Events generated by timer functions 
\details
@{
*/

/**
\fn void EvrRtxTimerError (osTimerId_t timer_id, int32_t status)
\details

*/

/**
\fn void EvrRtxTimerCallback (osTimerFunc_t func, void *argument)
\details

*/

/**
\fn void EvrRtxTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr)
\details

*/

/**
\fn void EvrRtxTimerCreated (osTimerId_t timer_id)
\details

*/

/**
\fn void EvrRtxTimerGetName (osTimerId_t timer_id, const char *name)
\details

*/

/**
\fn void EvrRtxTimerStart (osTimerId_t timer_id, uint32_t ticks)
\details

*/

/**
\fn void EvrRtxTimerStarted (osTimerId_t timer_id)
\details

*/

/**
\fn void EvrRtxTimerStop (osTimerId_t timer_id)
\details

*/

/**
\fn void EvrRtxTimerStopped (osTimerId_t timer_id)
\details

*/

/**
\fn void EvrRtxTimerIsRunning (osTimerId_t timer_id, uint32_t running)
\details

*/

/**
\fn void EvrRtxTimerDelete (osTimerId_t timer_id)
\details

*/

/**
\fn void EvrRtxTimerDestroyed (osTimerId_t timer_id)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_event_flasg Event Flags Functions
\brief Events generated by event flag functions 
\details
@{
*/

/**
\fn void EvrRtxEventFlagsError (osEventFlagsId_t ef_id, int32_t status)
\details

*/

/**
\fn void EvrRtxEventFlagsNew (const osEventFlagsAttr_t *attr)
\details

*/

/**
\fn void EvrRtxEventFlagsCreated (osEventFlagsId_t ef_id)
\details

*/

/**
\fn void EvrRtxEventFlagsGetName (osEventFlagsId_t ef_id, const char *name)
\details

*/

/**
\fn void EvrRtxEventFlagsSet (osEventFlagsId_t ef_id, int32_t flags)
\details

*/

/**
\fn void EvrRtxEventFlagsSetDone (osEventFlagsId_t ef_id, int32_t event_flags)
\details

*/

/**
\fn void EvrRtxEventFlagsClear (osEventFlagsId_t ef_id, int32_t flags)
\details

*/

/**
\fn void EvrRtxEventFlagsClearDone (osEventFlagsId_t ef_id, int32_t event_flags)
\details

*/

/**
\fn void EvrRtxEventFlagsGet (osEventFlagsId_t ef_id, int32_t event_flags)
\details

*/

/**
\fn void EvrRtxEventFlagsWait (osEventFlagsId_t ef_id, int32_t flags, uint32_t options, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxEventFlagsWaitPending (osEventFlagsId_t ef_id, int32_t flags, uint32_t options, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxEventFlagsWaitTimeout (osEventFlagsId_t ef_id);
\details

*/

/**
\fn void EvrRtxEventFlagsWaitCompleted (osEventFlagsId_t ef_id, int32_t flags, uint32_t options, int32_t event_flags)
\details

*/

/**
\fn void EvrRtxEventFlagsWaitNotCompleted (osEventFlagsId_t ef_id, int32_t flags, uint32_t options)
\details

*/

/**
\fn void EvrRtxEventFlagsDelete (osEventFlagsId_t ef_id)
\details

*/

/**
\fn void EvrRtxEventFlagsDestroyed (osEventFlagsId_t ef_id)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_mutex Mutex Functions
\brief Events generated by mutex functions 
\details
@{
*/

/**
\fn void EvrRtxMutexError (osMutexId_t mutex_id, int32_t status)
\details

*/

/**
\fn void EvrRtxMutexNew (const osMutexAttr_t *attr)
\details

*/

/**
\fn void EvrRtxMutexCreated (osMutexId_t mutex_id)
\details

*/

/**
\fn void EvrRtxMutexGetName (osMutexId_t mutex_id, const char *name)
\details

*/

/**
\fn void EvrRtxMutexAcquire (osMutexId_t mutex_id, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMutexAcquirePending (osMutexId_t mutex_id, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMutexAcquireTimeout (osMutexId_t mutex_id)
\details

*/

/**
\fn void EvrRtxMutexAcquired (osMutexId_t mutex_id, uint32_t lock)
\details

*/

/**
\fn void EvrRtxMutexNotAcquired (osMutexId_t mutex_id)
\details

*/

/**
\fn void EvrRtxMutexRelease (osMutexId_t mutex_id)
\details

*/

/**
\fn void EvrRtxMutexReleased (osMutexId_t mutex_id, uint32_t lock)
\details

*/

/**
\fn void EvrRtxMutexGetOwner (osMutexId_t mutex_id, osThreadId_t thread_id)
\details

*/

/**
\fn void EvrRtxMutexDelete (osMutexId_t mutex_id)
\details

*/

/**
\fn void EvrRtxMutexDestroyed (osMutexId_t mutex_id)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_semaphore Semaphore Functions
\brief Events generated by semaphore functions 
\details
@{
*/

/**
\fn void EvrRtxSemaphoreError (osSemaphoreId_t semaphore_id, int32_t status)
\details

*/

/**
\fn void EvrRtxSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr)
\details

*/

/**
\fn void EvrRtxSemaphoreCreated (osSemaphoreId_t semaphore_id)
\details

*/

/**
\fn void EvrRtxSemaphoreGetName (osSemaphoreId_t semaphore_id, const char *name)
\details

*/

/**
\fn void EvrRtxSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxSemaphoreAcquirePending (osSemaphoreId_t semaphore_id, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxSemaphoreAcquireTimeout (osSemaphoreId_t semaphore_id)
\details

*/

/**
\fn void EvrRtxSemaphoreAcquired (osSemaphoreId_t semaphore_id)
\details

*/

/**
\fn void EvrRtxSemaphoreNotAcquired (osSemaphoreId_t semaphore_id)
\details

*/

/**
\fn void EvrRtxSemaphoreRelease (osSemaphoreId_t semaphore_id)
\details

*/

/**
\fn void EvrRtxSemaphoreReleased (osSemaphoreId_t semaphore_id)
\details

*/

/**
\fn void EvrRtxSemaphoreGetCount (osSemaphoreId_t semaphore_id, uint32_t count)
\details

*/

/**
\fn void EvrRtxSemaphoreDelete (osSemaphoreId_t semaphore_id)
\details

*/

/**
\fn void EvrRtxSemaphoreDestroyed (osSemaphoreId_t semaphore_id)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_memory_pool Memory Pool Functions
\brief Events generated by memory pool functions 
\details
@{
*/

/**
\fn void EvrRtxMemoryPoolError (osMemoryPoolId_t mp_id, int32_t status)
\details

*/

/**
\fn void EvrRtxMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr)
\details

*/

/**
\fn void EvrRtxMemoryPoolCreated (osMemoryPoolId_t mp_id)
\details

*/

/**
\fn void EvrRtxMemoryPoolGetName (osMemoryPoolId_t mp_id, const char *name)
\details

*/

/**
\fn void EvrRtxMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMemoryPoolAllocPending (osMemoryPoolId_t mp_id, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMemoryPoolAllocTimeout (osMemoryPoolId_t mp_id)
\details

*/

/**
\fn void EvrRtxMemoryPoolAllocated (osMemoryPoolId_t mp_id, void *block)
\details

*/

/**
\fn void EvrRtxMemoryPoolAllocFailed (osMemoryPoolId_t mp_id)
\details

*/

/**
\fn void EvrRtxMemoryPoolFree (osMemoryPoolId_t mp_id, void *block)
\details

*/

/**
\fn void EvrRtxMemoryPoolDeallocated (osMemoryPoolId_t mp_id, void *block)
\details

*/

/**
\fn void EvrRtxMemoryPoolFreeFailed (osMemoryPoolId_t mp_id, void *block)
\details

*/

/**
\fn void EvrRtxMemoryPoolGetCapacity (osMemoryPoolId_t mp_id, uint32_t capacity)
\details

*/

/**
\fn void EvrRtxMemoryPoolGetBlockSize (osMemoryPoolId_t mp_id, uint32_t block_size)
\details

*/

/**
\fn void EvrRtxMemoryPoolGetCount (osMemoryPoolId_t mp_id, uint32_t count)
\details

*/

/**
\fn void EvrRtxMemoryPoolGetSpace (osMemoryPoolId_t mp_id, uint32_t space)
\details

*/

/**
\fn void EvrRtxMemoryPoolDelete (osMemoryPoolId_t mp_id)
\details

*/

/**
\fn void EvrRtxMemoryPoolDestroyed (osMemoryPoolId_t mp_id)
\details

*/

/**
@}
*/

/**
\defgroup rtx_evr_message_queue Message Queue Functions
\brief Events generated by message queue functions 
\details
@{
*/

/**
\fn void EvrRtxMessageQueueError (osMessageQueueId_t mq_id, int32_t status)
\details

*/

/**
\fn void EvrRtxMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr)
\details

*/

/**
\fn void EvrRtxMessageQueueCreated (osMessageQueueId_t mq_id)
\details

*/

/**
\fn void EvrRtxMessageQueueGetName (osMessageQueueId_t mq_id, const char *name)
\details

*/

/**
\fn void EvrRtxMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMessageQueuePutPending (osMessageQueueId_t mq_id, const void *msg_ptr, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMessageQueuePutTimeout (osMessageQueueId_t mq_id)
\details

*/

/**
\fn void EvrRtxMessageQueueInsertPending (osMessageQueueId_t mq_id, const void *msg_ptr)
\details

*/

/**
\fn void EvrRtxMessageQueueInserted (osMessageQueueId_t mq_id, const void *msg_ptr)
\details

*/

/**
\fn void EvrRtxMessageQueueNotInserted (osMessageQueueId_t mq_id, const void *msg_ptr)
\details

*/

/**
\fn void EvrRtxMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMessageQueueGetPending (osMessageQueueId_t mq_id, void *msg_ptr, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMessageQueueGetPending (osMessageQueueId_t mq_id, void *msg_ptr, uint32_t timeout)
\details

*/

/**
\fn void EvrRtxMessageQueueRetrieved (osMessageQueueId_t mq_id, void *msg_ptr)
\details

*/

/**
\fn void EvrRtxMessageQueueNotRetrieved (osMessageQueueId_t mq_id, void *msg_ptr)
\details

*/

/**
\fn void EvrRtxMessageQueueGetCapacity (osMessageQueueId_t mq_id, uint32_t capacity)
\details

*/

/**
\fn void EvrRtxMessageQueueGetMsgSize (osMessageQueueId_t mq_id, uint32_t msg_size)
\details

*/

/**
\fn void EvrRtxMessageQueueGetCount (osMessageQueueId_t mq_id, uint32_t count)
\details

*/

/**
\fn void EvrRtxMessageQueueGetSpace (osMessageQueueId_t mq_id, uint32_t space)
\details

*/

/**
\fn void EvrRtxMessageQueueReset (osMessageQueueId_t mq_id)
\details

*/

/**
\fn void EvrRtxMessageQueueResetDone (osMessageQueueId_t mq_id)
\details

*/

/**
\fn void EvrRtxMessageQueueDelete (osMessageQueueId_t mq_id)
\details

*/

/**
\fn void EvrRtxMessageQueueDestroyed (osMessageQueueId_t mq_id)
\details

*/

/**
@}
*/

/**
@} 
*/
// end group Event Recorder