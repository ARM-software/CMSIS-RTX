RTX5 MISRA Compliance
=====================


Environment
-----------

Project: RTX5 for Cortex-M
Diagnostic Tool: PC-lint for C/C++ V9.00L
C/C++ Compiler: ARMCC6 V6.9
Toolchain: Keil MDK 5.25

MISRA rules: MISRA C 2012

PC-lint configuration:
 - Compiler: co-ARMCC-6.lnt (20-Mar-2017) with additional options:
   +rw(__restrict)
   -esym(526,__builtin_*) -esym(628,__builtin_*)
   -sem(__builtin_clz, pure)
   +doffsetof(t,m)=((size_t)&((t*)0)->m) -emacro((413,923,9078),offsetof)
   -ecall(534,__disable_irq)
 - MISRA C 2012: au-misra3.lnt (12-Jun-2014)
 - Included Project Information: "Include" paths, "Software Packs" paths (with Verify), "Preprocessor" symbols, "Define" symbols
 - Additional options:
   -emacro(835,osRtxConfigPrivilegedMode)


Deviations
----------

Summary:
 - [MISRA 2012 Directive  4.9,  advisory]: A function should be used in preference to a function-like macro where yet are interchangeable
 - [MISRA 2012 Rule       1.3,  required]: There shall be no occurrence of undefined or critical unspecified behavior
 - [MISRA 2012 Rule      10.3,  required]: Expression assigned to a narrower or different essential type
 - [MISRA 2012 Rule      10.5,  advisory]: Impermissible cast; cannot cast from 'essentially unsigned' to 'essentially enum<i>'
 - [MISRA 2012 Rule      11.1,  required]: Conversions shall not be performed between a pointer to a function and any other type
 - [MISRA 2012 Rule      11.3,  required]: A cast shall not be performed between a pointer to object type and a pointer to a different object type
 - [MISRA 2012 Rule      11.4,  advisory]: A conversion should not be performed between a pointer to object and an integer type
 - [MISRA 2012 Rule      11.5,  advisory]: A conversion should not be performed from pointer to void into pointer to object
 - [MISRA 2012 Rule      11.6,  required]: A cast shall not be performed between pointer to void and an arithmetic type
 - [MISRA 2012 Rule      15.5,  advisory]: A function should have a single point of exit at the end
 - [MISRA 2012 Rule      20.10, advisory]: The # and ## preprocessor operators should not be used


[MISRA Note 1]

MISRA Rules:
 - Note 904: Return statement before end of function [MISRA 2012 Rule 15.5, advisory]

Deviation justification:
Early returns are used at the beginning of some functions when validating parameters (and object states)
and the function returns immediately without side-effects (typically with an error).
This helps keeping the source code better structured and more understandable.


[MISRA Note 2]

Code:
typedef void *osThreadId_t;
typedef void *osTimerId_t;
typedef void *osEventFlagsId_t;
typedef void *osMutexId_t;
typedef void *osSemaphoreId_t;
typedef void *osMemoryPoolId_t;
typedef void *osMessageQueueId_t;

typedef struct { ... } osRtxThread_t;
typedef struct { ... } osRtxTimer_t;
typedef struct { ... } osRtxEventFlags_t;
typedef struct { ... } osRtxMutex_t;
typedef struct { ... } osRtxSemaphore_t;
typedef struct { ... } osRtxMemoryPool_t;
typedef struct { ... } osRtxMessageQueue_t;

osRtxThread_t *osRtxThreadId(osThread_t thread_id) {
  // cast from pointer to void to pointer to object type
  return ((osRtxThread_t *)thread_id);
}
osRtxTimer_t *osRtxTimerId(osTimer_t timer_id) {
  // cast from pointer to void to pointer to object type
  return ((osRtxTimer_t *)timer_id);
}
osRtxEventFlags_t *osRtxEventFlagsId(osEventFlags_t ef_id) {
  // cast from pointer to void to pointer to object type
  return ((osRtxEventFlags_t *)ef_id);
}
osRtxMutex_t *osRtxMutexId(osMutex_t mutex_id) {
  // cast from pointer to void to pointer to object type
  return ((osRtxMutex_t *)mutex_id);
}
osRtxSemaphore_t *osRtxSemaphoreId(osSemaphore_t semaphore_id) {
  // cast from pointer to void to pointer to object type
  return ((osRtxSemaphore_t *)semaphore_id);
}
osRtxMemoryPool_t *osRtxMemoryPoolId(osMemoryPoolId_t mp_id) {
  // cast from pointer to void to pointer to object type
  return ((osRtxMemoryPool_t *)mq_id);
}
osRtxMessageQueue_t *osRtxMessageQueueId(osMessageQueueId_t mq_id) {
  // cast from pointer to void to pointer to object type
  return ((osRtxMessageQueue_t *)mq_id);
}

MISRA Rules:
 - Note 9079: conversion from pointer to void to pointer to other type [MISRA 2012 Rule 11.5, advisory]"
 - Note 9087: cast performed between a pointer to object type and a pointer to a different object type [MISRA 2012 Rule 11.3, required]"

Deviation justification:
"id" is an object identifier and is defined as pointer to void in CMSIS RTOS2 in order to be flexible.
"id" is returned by "osObjectNew" functions when object is created and is referenced by all other object functions.
"id" in RTX5 is actually a pointer to object control block and is returned when object is created.
Therefore when referencing objects in all other object functions "id" already points to the object control block.


[MISRA Note 3]

Code:
osRtxObject_t *osRtxObject (void *object) {
  // cast from pointer to void to pointer to object type
  return ((osRtxObject_t *)object);
}

MISRA Rules:
 - Note 9079: conversion from pointer to void to pointer to other type [MISRA 2012 Rule 11.5, advisory]"
 - Note 9087: cast performed between a pointer to object type and a pointer to a different object type [MISRA 2012 Rule 11.3, required]"

Deviation justification:
Generic object control block contains common object members and has the same layout at the beginning (always starts with object identifier).
Common object functions receive a pointer to a generic object control block and reference only the pointer or certain members (depending on object type).
Using common object functions and data (example: ISR queue) reduces code size and keeps the source code better structured.
See also Note 4.


[MISRA Note 4]

Code:
osRtxThread_t *osRtxThreadObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxThread_t *)object);
}
osRtxTimer_t *osRtxTimerObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxTimer_t *)object);
}
osRtxEventFlags_t *osRtxEventFlagsObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxEventFlags_t *)object);
}
osRtxMutex_t *osRtxMutexObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxMutex_t *)object);
}
osRtxSemaphore_t *osRtxSemaphoreObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxSemaphore_t *)object);
}
osRtxMemoryPool_t *osRtxMemoryPoolObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxMemoryPool_t *)object);
}
osRtxMessageQueue_t *osRtxMessageQueueObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxMessageQueue_t *)object);
}
osRtxMessage_t *osRtxMessageObject (osRtxObject_t *object) {
  // cast from pointer to generic object to specific object
  return ((osRtxMessage_t *)object);
}

MISRA Rules:
 - Note 9087: cast performed between a pointer to object type and a pointer to a different object type [MISRA 2012 Rule 11.3, required]"
 - Info  740: Unusual pointer cast (incompatible indirect types) [MISRA 2012 Rule 1.3, required]"
 - Info  826: Suspicious pointer-to-pointer conversion (area too small)

Deviation justification:
See Note 3.


[MISRA Note 5]

Code:
void *MemoryAlloc(...);
osRtxObject_t *object;

// conversion from pointer to void to pointer to object type
object = MemoryAlloc(...);

MISRA Rules:
 - Note 9079: conversion from pointer to void to pointer to other type [MISRA 2012 Rule 11.5, advisory]"

Deviation justification:
RTX5 has common memory management functions. Allocate returns a pointer to void which is already properly aligned.


[MISRA Note 6]

Code:
void *mem;
osRtxObject_t *object;

// conversion from pointer to void to pointer to object type
object = mem;
object = (osRtxObject_t *)mem;

MISRA Rules:
 - Note 9079: conversion from pointer to void to pointer to other type [MISRA 2012 Rule 11.5, advisory]"
 - Note 9087: cast performed between a pointer to object type and a pointer to a different object type [MISRA 2012 Rule 11.3, required]"

Deviation justification:
CMSIS RTOS2 supports user provided storage for object control blocks, stack and data storage. They are all defined as pointers to void.
RTX5 memory management functions also provide memory defined as pointer to void.
Only requirement is proper alignment which is checked before members are accessed (see also Note 7).


[MISRA Note 7]

Code:
void *mem;
osRtxObject_t *object;

object = mem;

// cast from pointer to unsigned int
if (((uint32_t)mem & 7U) != 0U) {...}
if (((uint32_t)object & 3U) != 0U) {...}

MISRA Rules:
 - Note  923: cast from pointer to unsigned int [MISRA 2012 Rule 11.6, required]
 - Note 9078: conversion between a pointer and integer type [MISRA 2012 Rule 11.4, advisory]"

Deviation justification:
Needed for checking proper pointer alignment (see also Note 6).


[MISRA Note 8]

Code: 
void *mem;
uint32_t addr;
uint32_t offset;
osRtxObject_t *object;

// cast from pointer to unsigned int
addr = (uint32_t)mem + offset;

// cast from unsigned int to pointer
object = (osRtxObject_t *)addr;

MISRA Rules:
 - Note  923: cast between pointer and unsigned int [MISRA 2012 Rule 11.6, required]
 - Note 9078: conversion between a pointer and integer type [MISRA 2012 Rule 11.4, advisory]"

Deviation justification:
Needed for addressing objects which are memory mapped and well defined.


[MISRA Note 9]

Code:
#define SCS_BASE  (0xE000E000UL)
#define SCB      ((SCB_Type *)SCB_BASE)
typedef struct {...} SCB_Type;

SCB->... = ...;

MISRA Rules:
 - Note  923: cast from unsigned long to pointer [MISRA 2012 Rule 11.6, required]"
 - Note 9078: conversion between a pointer and integer type [MISRA 2012 Rule 11.4, advisory]"

Deviation justification:
CMSIS core registers are defined as pointers derived from memory address which is specified as unsigned integer.
RTX5 uses CMSIS core functions and registers.


[MISRA Note 10]

Code:
SVC (Service Calls) macros

MISRA Rules:
 - Note 9023: Multiple use of '#/##' operators in definition of macro [MISRA 2012 Rule 1.3, required]"
 - Note 9024: '#/##' operator used in macro [MISRA 2012 Rule 20.10, advisory]"
 - Note 9026: Function-like macro defined [MISRA 2012 Directive 4.9, advisory]"

Deviation justification:
SVC macros are used to construct code for SVC (Service Calls).
They are function-like macros in order to generate variable code depending on macro parameters (cannot be simply exchanged by function calls).
Macros use multiple '##' operators however the order of evaluation is not relevant and result of macro expansion is always predictable.


[MISRA Note 11]

Code:
SVC (Service Calls) functions (__svc*)

MISRA Rules:
 - Note  923: cast from pointer to unsigned int [MISRA 2012 Rule 11.6, required]"
 - Note 9030: Impermissible cast; cannot cast from 'essentially unsigned' to 'essentially enum<i>' [MISRA 2012 Rule 10.5, advisory]"
 - Note 9034: Expression assigned to a narrower or different essential type [MISRA 2012 Rule 10.3, required]"
 - Note 9074: conversion between a pointer to function and another type [MISRA 2012 Rule 11.1, required]"
 - Note 9078: conversion between a pointer and integer type [MISRA 2012 Rule 11.4, advisory]"

Deviation justification:
Service Call functions are constructed as a mix of C and inline assembly (direct register access and SVC call) including operand lists.
Parameters are directly mapped to machine registers R0..R3 and SVC function to R12 (or R7) before SVC call.
Parameters are casted to unsigned int which however has no side-effects and is well defined.
Return value after SVC call is also mapped to a machine register R0 (previously used as input parameter).
Return value is casted from unsigned int which also has no side-effects and is well defined.

PC-lint does not process ASM input/output operand lists and therefore falsely identifies issues:
 - Last value assigned to variable not used
 - Symbol not subsequently referenced

SVC functions are marked as library modules and not processed by PC-lint.


[MISRA Note 12]

Code:
Exclusive Access operations (functions atomic_*)

C functions are implemented with inline assembly (for exclusive access) including operand lists.

PC-lint does not process ASM input/output operand lists and therefore falsely identifies issues:
 - Symbol not initialized
 - Symbol not subsequently referenced
 - Symbol not referenced
 - Pointer parameter could be declared as pointing to const

Exclusive Access operations do not have the listed issues. They are marked as library modules and not processed by PC-lint.


[MISRA Note 13]

Code:
#define EventLevelError         0x00000U
#define EventLevelAPI           0x10000U
#define EventLevelOp            0x20000U
#define EventLevelDetail        0x30000U

#define EventID(level, comp_no, msg_no) ((level & 0x30000U) | ((comp_no & 0xFFU) << 8) | (msg_no & 0xFFU))

#define EvtRtxMemoryNo         (0xF0U)
#define EvtRtxKernelNo         (0xF1U)
#define EvtRtxThreadNo         (0xF2U)

#define EvtRtxMemoryInit        EventID(EventLevelOp,     EvtRtxMemoryNo, 0x00U)
#define EvtRtxKernelError       EventID(EventLevelError,  EvtRtxKernelNo, 0x00U)
#define EvtRtxThreadNew         EventID(EventLevelAPI,    EvtRtxThreadNo, 0x01U)

extern uint32_t EventRecordData (uint32_t id, const void *data, uint32_t len);
extern uint32_t EventRecord2    (uint32_t id, uint32_t val1, uint32_t val2);
extern uint32_t EventRecord4    (uint32_t id, uint32_t val1, uint32_t val2, uint32_t val3, uint32_t val4);

typedef void (*osThreadFunc_t) (void *argument);

{
  void    *mem;
  void   (*func)(void *arg);
  uint32_t size;
  uint32_t result;
   int32_t status;

  (void)EventRecord4(EvtRtxMemoryInit,  (uint32_t)mem, size, result, 0U);
  (void)EventRecord2(EvtRtxKernelError, (uint32_t)status, 0U);
  (void)EventRecord2(EvtRtxThreadNew,   (uint32_t)func, (uint32_t)arg);
}

MISRA Rules:
 - Note  923: cast from pointer to unsigned int [MISRA 2012 Rule 11.6, required]
 - Note 9074: conversion between a pointer to function and another type [MISRA 2012 Rule 11.1, required]"
 - Note 9078: conversion between a pointer and integer type [MISRA 2012 Rule 11.4, advisory]"
 - Info  835: A zero has been given as left argument to operator '&'
 - Info  845: The right argument to operator '|' is certain to be 0

Deviation justification:
Event Recorder is an event logger and the mentioned functions are called to record an event.
Parameters are 32-bit id, 32-bit values, pointer to void (data) and are recorded as 32-bit numbers.
Parameters might require casting to unsigned int which however has no side-effects and is well defined.
Return value indicates success or failure. There is no need to check the return value since no action is needed if the function fails.
EventID macro (part of external Event Recorder) constructs the ID based on input parameters which are shifted, masked with '&' and combined with '|'.
Zero value input parameters are valid and cause zero used with '&' and '|'.
